
 #include <xc.inc>
    
global DAC_Int_Hi,sawtooth,square,DAC_Setup, keyvalue
 extrn high_value, low_value, offset_high, delay,LCD_delay_ms, LCD_delay_x4us	, LCD_Send_Byte_D, LCD_Write_Hex, sinemul

 
psect	udata_acs   ; reserve data space in access ram
counter:    ds 1    ; reserve one byte for a counter variable
counter2:ds 1
delay_count:ds 1    ; reserve one byte for counter in the delay routine
counter_value: ds 1
keyvalue: ds 1
    ibsr:ds 1
    istatus:ds 1
work: ds 1
prekey: ds 1; previous keypad value
 sqcon1: ds 1
     sqcon2: ds 1

;------------------------------------------------------------------------------;
;			      Sine - Lookup Table				       ;
;------------------------------------------------------------------------------;
 ;---------	    Hexadecimal Values for Sine call function          --------;
		  ;---------- values gotten online  -----------;
psect data ; reserve data in RAM Program Memory 
table_length  EQU		61	;; length of data for each SineTable
Sinx08Table:
    db	0x4,0x4,0x5,0x5,0x6,0x6,0x6,0x7,0x7,0x7,0x7,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x7,0x7,0x7,0x6,0x6,0x6,0x5,0x5,0x5,0x4,0x4,0x3,0x3,0x3,0x2,0x2,0x2,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x2,0x2,0x2,0x3,0x3,0x4
Sinx10Table:
    db	0x8,0x9,0xa,0xa,0xb,0xc,0xd,0xd,0xe,0xe,0xf,0xf,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0xf,0xf,0xf,0xe,0xe,0xd,0xc,0xc,0xb,0xa,0x9,0x8,0x8,0x7,0x6,0x5,0x4,0x4,0x3,0x2,0x2,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x2,0x2,0x3,0x3,0x4,0x5,0x6,0x6,0x7
Sinx18Table:
    db	0xc,0xd,0xe,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x16,0x17,0x17,0x18,0x18,0x18,0x18,0x18,0x18,0x17,0x17,0x16,0x15,0x14,0x13,0x12,0x11,0x10,0xf,0xe,0xd,0xb,0xa,0x9,0x8,0x7,0x6,0x5,0x4,0x3,0x2,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x2,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0xa,0xb
Sinx20Table:
    db	0x10,0x12,0x13,0x15,0x16,0x18,0x19,0x1b,0x1c,0x1d,0x1e,0x1e,0x1f,0x20,0x20,0x20,0x20,0x20,0x1f,0x1f,0x1e,0x1d,0x1c,0x1b,0x1a,0x19,0x17,0x16,0x14,0x12,0x11,0xf,0xe,0xc,0xa,0x9,0x7,0x6,0x5,0x4,0x3,0x2,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x1,0x2,0x2,0x3,0x4,0x5,0x7,0x8,0xa,0xb,0xd,0xe
Sinx28Table:
    db	0x14,0x16,0x18,0x1a,0x1c,0x1e,0x20,0x21,0x23,0x24,0x25,0x26,0x27,0x27,0x28,0x28,0x28,0x28,0x27,0x27,0x26,0x25,0x23,0x22,0x20,0x1f,0x1d,0x1b,0x19,0x17,0x15,0x13,0x11,0xf,0xd,0xb,0x9,0x8,0x6,0x5,0x3,0x2,0x1,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x2,0x3,0x4,0x5,0x7,0x8,0xa,0xc,0xe,0x10,0x12
Sinx30Table:
    db	0x18,0x1a,0x1d,0x1f,0x22,0x24,0x26,0x28,0x2a,0x2b,0x2d,0x2e,0x2f,0x2f,0x30,0x30,0x30,0x30,0x2f,0x2e,0x2d,0x2c,0x2a,0x29,0x27,0x25,0x23,0x20,0x1e,0x1c,0x19,0x17,0x14,0x12,0x10,0xd,0xb,0x9,0x7,0x6,0x4,0x3,0x2,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x2,0x3,0x5,0x6,0x8,0xa,0xc,0xe,0x11,0x13,0x16
Sinx38Table:
    db	0x1c,0x1f,0x22,0x25,0x27,0x2a,0x2c,0x2e,0x31,0x32,0x34,0x35,0x36,0x37,0x38,0x38,0x38,0x38,0x37,0x36,0x35,0x33,0x32,0x30,0x2d,0x2b,0x29,0x26,0x23,0x20,0x1d,0x1b,0x18,0x15,0x12,0xf,0xd,0xb,0x8,0x6,0x5,0x3,0x2,0x1,0x0,0x0,0x0,0x0,0x1,0x2,0x3,0x4,0x6,0x7,0xa,0xc,0xe,0x11,0x13,0x16,0x19
Sinx40Table:
    db	0x20,0x23,0x27,0x2a,0x2d,0x30,0x33,0x35,0x37,0x3a,0x3b,0x3d,0x3e,0x3f,0x40,0x40,0x40,0x3f,0x3f,0x3e,0x3c,0x3b,0x39,0x36,0x34,0x31,0x2e,0x2b,0x28,0x25,0x22,0x1e,0x1b,0x18,0x15,0x12,0xf,0xc,0xa,0x7,0x5,0x4,0x2,0x1,0x1,0x0,0x0,0x0,0x1,0x2,0x3,0x5,0x6,0x9,0xb,0xd,0x10,0x13,0x16,0x19,0x1d
Sinx48Table:
    db	0x24,0x28,0x2b,0x2f,0x32,0x36,0x39,0x3c,0x3e,0x41,0x43,0x45,0x46,0x47,0x48,0x48,0x48,0x47,0x47,0x45,0x44,0x42,0x40,0x3d,0x3a,0x37,0x34,0x31,0x2d,0x2a,0x26,0x22,0x1e,0x1b,0x17,0x14,0x11,0xe,0xb,0x8,0x6,0x4,0x3,0x1,0x1,0x0,0x0,0x0,0x1,0x2,0x3,0x5,0x7,0xa,0xc,0xf,0x12,0x16,0x19,0x1d,0x20
Sinx50Table:
    db	0x28,0x2c,0x30,0x34,0x38,0x3c,0x3f,0x42,0x45,0x48,0x4a,0x4c,0x4e,0x4f,0x50,0x50,0x50,0x4f,0x4e,0x4d,0x4b,0x49,0x47,0x44,0x41,0x3d,0x3a,0x36,0x32,0x2e,0x2a,0x26,0x22,0x1e,0x1a,0x16,0x13,0xf,0xc,0x9,0x7,0x5,0x3,0x2,0x1,0x0,0x0,0x0,0x1,0x2,0x4,0x6,0x8,0xb,0xe,0x11,0x14,0x18,0x1c,0x20,0x24
Sinx58Table:
    db	0x2c,0x31,0x35,0x39,0x3e,0x42,0x45,0x49,0x4c,0x4f,0x52,0x54,0x56,0x57,0x58,0x58,0x58,0x57,0x56,0x55,0x53,0x51,0x4e,0x4b,0x47,0x44,0x40,0x3c,0x37,0x33,0x2e,0x2a,0x25,0x21,0x1c,0x18,0x14,0x11,0xd,0xa,0x7,0x5,0x3,0x2,0x1,0x0,0x0,0x0,0x1,0x2,0x4,0x6,0x9,0xc,0xf,0x13,0x16,0x1a,0x1f,0x23,0x27
Sinx60Table:
    db	0x30,0x35,0x3a,0x3f,0x43,0x48,0x4c,0x50,0x53,0x56,0x59,0x5b,0x5d,0x5f,0x60,0x60,0x60,0x5f,0x5e,0x5c,0x5a,0x58,0x55,0x52,0x4e,0x4a,0x45,0x41,0x3c,0x37,0x32,0x2e,0x29,0x24,0x1f,0x1b,0x16,0x12,0xe,0xb,0x8,0x6,0x4,0x2,0x1,0x0,0x0,0x0,0x1,0x3,0x5,0x7,0xa,0xd,0x10,0x14,0x18,0x1d,0x21,0x26,0x2b
Sinx68Table:
    db	0x34,0x39,0x3f,0x44,0x49,0x4e,0x52,0x56,0x5a,0x5e,0x61,0x63,0x65,0x67,0x68,0x68,0x68,0x67,0x66,0x64,0x62,0x5f,0x5c,0x58,0x54,0x50,0x4b,0x46,0x41,0x3c,0x37,0x31,0x2c,0x27,0x22,0x1d,0x18,0x14,0x10,0xc,0x9,0x6,0x4,0x2,0x1,0x0,0x0,0x0,0x1,0x3,0x5,0x7,0xa,0xe,0x12,0x16,0x1a,0x1f,0x24,0x29,0x2f
Sinx70Table:
    db	0x38,0x3e,0x43,0x49,0x4e,0x54,0x58,0x5d,0x61,0x65,0x68,0x6b,0x6d,0x6f,0x70,0x70,0x70,0x6f,0x6e,0x6c,0x69,0x66,0x63,0x5f,0x5b,0x56,0x51,0x4c,0x46,0x41,0x3b,0x35,0x2f,0x2a,0x24,0x1f,0x1a,0x15,0x11,0xd,0xa,0x7,0x4,0x2,0x1,0x0,0x0,0x0,0x1,0x3,0x5,0x8,0xb,0xf,0x13,0x18,0x1c,0x22,0x27,0x2d,0x3
Sinx78Table:
    db	0x3c,0x42,0x48,0x4e,0x54,0x5a,0x5f,0x64,0x68,0x6c,0x6f,0x72,0x75,0x76,0x78,0x78,0x78,0x77,0x76,0x74,0x71,0x6e,0x6a,0x66,0x61,0x5c,0x57,0x51,0x4b,0x45,0x3f,0x39,0x33,0x2d,0x27,0x21,0x1c,0x17,0x12,0xe,0xa,0x7,0x4,0x2,0x1,0x0,0x0,0x0,0x2,0x3,0x6,0x9,0xc,0x10,0x14,0x19,0x1e,0x24,0x2a,0x30,0x36
Sinx80Table:
    db	0x40,0x47,0x4d,0x53,0x5a,0x60,0x65,0x6a,0x6f,0x73,0x77,0x7a,0x7c,0x7e,0x7f,0x80,0x80,0x7f,0x7d,0x7b,0x78,0x75,0x71,0x6d,0x68,0x62,0x5d,0x57,0x50,0x4a,0x43,0x3d,0x36,0x30,0x29,0x23,0x1e,0x18,0x13,0xf,0xb,0x8,0x5,0x3,0x1,0x0,0x0,0x1,0x2,0x4,0x6,0x9,0xd,0x11,0x16,0x1b,0x20,0x26,0x2d,0x33,0x39
Sinx88Table:
    db	0x44,0x4b,0x52,0x59,0x5f,0x65,0x6b,0x71,0x76,0x7a,0x7e,0x82,0x84,0x86,0x87,0x88,0x88,0x87,0x85,0x83,0x80,0x7c,0x78,0x73,0x6e,0x68,0x62,0x5c,0x55,0x4e,0x48,0x40,0x3a,0x33,0x2c,0x26,0x20,0x1a,0x15,0x10,0xc,0x8,0x5,0x3,0x1,0x0,0x0,0x1,0x2,0x4,0x6,0xa,0xe,0x12,0x17,0x1d,0x23,0x29,0x2f,0x36,0x3d
Sinx90Table:
    db	0x48,0x4f,0x57,0x5e,0x65,0x6b,0x72,0x78,0x7d,0x82,0x86,0x89,0x8c,0x8e,0x8f,0x90,0x90,0x8f,0x8d,0x8b,0x88,0x84,0x7f,0x7a,0x75,0x6f,0x68,0x61,0x5a,0x53,0x4c,0x44,0x3d,0x36,0x2f,0x28,0x21,0x1b,0x16,0x11,0xc,0x8,0x5,0x3,0x1,0x0,0x0,0x1,0x2,0x4,0x7,0xa,0xe,0x13,0x18,0x1e,0x25,0x2b,0x32,0x39,0x41
Sinx98Table:
    db	0x4c,0x54,0x5c,0x63,0x6a,0x71,0x78,0x7e,0x84,0x89,0x8d,0x91,0x94,0x96,0x97,0x98,0x98,0x97,0x95,0x92,0x8f,0x8b,0x86,0x81,0x7b,0x75,0x6e,0x67,0x5f,0x58,0x50,0x48,0x40,0x39,0x31,0x2a,0x23,0x1d,0x17,0x12,0xd,0x9,0x6,0x3,0x1,0x0,0x0,0x1,0x2,0x4,0x7,0xb,0xf,0x14,0x1a,0x20,0x27,0x2e,0x35,0x3c,0x44
Sinxa0Table:
    db	0x50,0x58,0x60,0x68,0x70,0x77,0x7e,0x85,0x8b,0x90,0x95,0x98,0x9c,0x9e,0x9f,0xa0,0xa0,0x9f,0x9d,0x9a,0x97,0x92,0x8d,0x88,0x82,0x7b,0x74,0x6c,0x64,0x5c,0x54,0x4c,0x44,0x3c,0x34,0x2c,0x25,0x1e,0x18,0x13,0xe,0x9,0x6,0x3,0x1,0x0,0x0,0x1,0x2,0x4,0x8,0xb,0x10,0x15,0x1b,0x22,0x29,0x30,0x38,0x40,0x48
Sinxa8Table:
    db	0x54,0x5d,0x65,0x6e,0x76,0x7d,0x85,0x8b,0x92,0x97,0x9c,0xa0,0xa3,0xa6,0xa7,0xa8,0xa8,0xa7,0xa5,0xa2,0x9e,0x9a,0x95,0x8f,0x88,0x81,0x7a,0x72,0x69,0x61,0x58,0x50,0x47,0x3f,0x36,0x2e,0x27,0x20,0x19,0x13,0xe,0xa,0x6,0x3,0x1,0x0,0x0,0x1,0x2,0x5,0x8,0xc,0x11,0x16,0x1d,0x23,0x2b,0x32,0x3a,0x43,0x4b
Sinxb0Table:
    db	0x58,0x61,0x6a,0x73,0x7b,0x83,0x8b,0x92,0x99,0x9e,0xa3,0xa8,0xab,0xae,0xaf,0xb0,0xb0,0xaf,0xac,0xaa,0xa6,0xa1,0x9c,0x95,0x8f,0x87,0x7f,0x77,0x6e,0x66,0x5d,0x53,0x4a,0x42,0x39,0x31,0x29,0x21,0x1b,0x14,0xf,0xa,0x6,0x4,0x1,0x0,0x0,0x1,0x2,0x5,0x8,0xd,0x12,0x17,0x1e,0x25,0x2d,0x35,0x3d,0x46,0x4f
Sinxb8Table:
    db	0x5c,0x65,0x6f,0x78,0x81,0x89,0x91,0x99,0xa0,0xa6,0xab,0xaf,0xb3,0xb6,0xb7,0xb8,0xb8,0xb7,0xb4,0xb1,0xad,0xa8,0xa3,0x9c,0x95,0x8d,0x85,0x7c,0x73,0x6a,0x61,0x57,0x4e,0x45,0x3c,0x33,0x2b,0x23,0x1c,0x15,0x10,0xb,0x7,0x4,0x1,0x0,0x0,0x1,0x2,0x5,0x9,0xd,0x12,0x18,0x1f,0x27,0x2f,0x37,0x40,0x49,0x53
Sinxc0Table:
    db	0x60,0x6a,0x74,0x7d,0x86,0x8f,0x98,0x9f,0xa6,0xad,0xb2,0xb7,0xbb,0xbd,0xbf,0xc0,0xc0,0xbe,0xbc,0xb9,0xb5,0xb0,0xaa,0xa3,0x9c,0x94,0x8b,0x82,0x78,0x6f,0x65,0x5b,0x51,0x48,0x3e,0x35,0x2c,0x24,0x1d,0x16,0x10,0xb,0x7,0x4,0x2,0x0,0x0,0x1,0x3,0x5,0x9,0xe,0x13,0x1a,0x21,0x28,0x31,0x3a,0x43,0x4c,0x56
Sinxc8Table:
    db	0x64,0x6e,0x78,0x82,0x8c,0x95,0x9e,0xa6,0xad,0xb4,0xba,0xbf,0xc2,0xc5,0xc7,0xc8,0xc8,0xc6,0xc4,0xc1,0xbc,0xb7,0xb1,0xaa,0xa2,0x9a,0x91,0x87,0x7d,0x73,0x69,0x5f,0x55,0x4b,0x41,0x37,0x2e,0x26,0x1e,0x17,0x11,0xc,0x7,0x4,0x2,0x0,0x0,0x1,0x3,0x6,0x9,0xe,0x14,0x1b,0x22,0x2a,0x33,0x3c,0x46,0x50,0x5a
Sinxd0Table:
    db	0x68,0x73,0x7d,0x88,0x92,0x9b,0xa4,0xad,0xb4,0xbb,0xc1,0xc6,0xca,0xcd,0xcf,0xd0,0xd0,0xce,0xcc,0xc8,0xc4,0xbe,0xb8,0xb1,0xa9,0xa0,0x96,0x8d,0x82,0x78,0x6d,0x63,0x58,0x4e,0x43,0x3a,0x30,0x27,0x1f,0x18,0x12,0xc,0x8,0x4,0x2,0x0,0x0,0x1,0x3,0x6,0xa,0xf,0x15,0x1c,0x23,0x2c,0x35,0x3e,0x48,0x53,0x5d
Sinxd8Table:
    db	0x6c,0x77,0x82,0x8d,0x97,0xa1,0xab,0xb3,0xbb,0xc2,0xc9,0xce,0xd2,0xd5,0xd7,0xd8,0xd8,0xd6,0xd4,0xd0,0xcb,0xc6,0xbf,0xb7,0xaf,0xa6,0x9c,0x92,0x88,0x7d,0x72,0x66,0x5b,0x50,0x46,0x3c,0x32,0x29,0x21,0x19,0x12,0xd,0x8,0x4,0x2,0x0,0x0,0x1,0x3,0x6,0xa,0xf,0x16,0x1d,0x25,0x2d,0x37,0x41,0x4b,0x56,0x61
Sinxe0Table:
    db	0x70,0x7c,0x87,0x92,0x9d,0xa7,0xb1,0xba,0xc2,0xca,0xd0,0xd5,0xda,0xdd,0xdf,0xe0,0xe0,0xde,0xdc,0xd8,0xd3,0xcd,0xc6,0xbe,0xb6,0xac,0xa2,0x98,0x8d,0x81,0x76,0x6a,0x5f,0x53,0x48,0x3e,0x34,0x2a,0x22,0x1a,0x13,0xd,0x8,0x4,0x2,0x0,0x0,0x1,0x3,0x6,0xb,0x10,0x16,0x1e,0x26,0x2f,0x39,0x43,0x4e,0x59,0x64
Sinxe8Table:
    db	0x74,0x80,0x8c,0x97,0xa2,0xad,0xb7,0xc1,0xc9,0xd1,0xd7,0xdd,0xe2,0xe5,0xe7,0xe8,0xe8,0xe6,0xe3,0xdf,0xda,0xd4,0xcd,0xc5,0xbc,0xb2,0xa8,0x9d,0x92,0x86,0x7a,0x6e,0x62,0x56,0x4b,0x40,0x36,0x2c,0x23,0x1b,0x14,0xe,0x9,0x5,0x2,0x0,0x0,0x1,0x3,0x6,0xb,0x11,0x17,0x1f,0x27,0x31,0x3b,0x46,0x51,0x5c,0x68
Sinxf0Table:
    db	0x78,0x84,0x91,0x9c,0xa8,0xb3,0xbe,0xc7,0xd0,0xd8,0xdf,0xe5,0xe9,0xed,0xef,0xf0,0xf0,0xee,0xeb,0xe7,0xe2,0xdc,0xd4,0xcc,0xc2,0xb8,0xae,0xa2,0x97,0x8a,0x7e,0x72,0x66,0x59,0x4e,0x42,0x38,0x2e,0x24,0x1c,0x14,0xe,0x9,0x5,0x2,0x0,0x0,0x1,0x3,0x7,0xb,0x11,0x18,0x20,0x29,0x32,0x3d,0x48,0x54,0x5f,0x6c
Sinxf8Table:
    db	0x7c,0x89,0x95,0xa2,0xae,0xb9,0xc4,0xce,0xd7,0xdf,0xe6,0xec,0xf1,0xf5,0xf7,0xf8,0xf8,0xf6,0xf3,0xef,0xe9,0xe3,0xdb,0xd3,0xc9,0xbf,0xb3,0xa8,0x9c,0x8f,0x82,0x76,0x69,0x5c,0x50,0x45,0x39,0x2f,0x25,0x1d,0x15,0xf,0x9,0x5,0x2,0x0,0x0,0x1,0x3,0x7,0xc,0x12,0x19,0x21,0x2a,0x34,0x3f,0x4a,0x56,0x63,0x6f
	
	
psect	dac_code, class=CODE
 
DAC_Setup:
	
	
	movlw 0x1e
	movwf sqcon1, A
	movlw 0x1f
	movwf sqcon2, A
	
	movwf prekey, A
	movlw 0x02
	;movwf sinemul
	clrf	TRISJ, A	; Set PORTJ as all outputs
	clrf	LATJ, A		; Clear PORTJ outputs
	clrf TRISC, A		; Set PORTC as all outputs
	clrf LATC, A		; Clear PORTC outputs	
	bsf RC0			; Set Port C, Pin 0 to 1 (INPUT)
	movlw	10000011B	; Set timer0 to 16-bit, Fosc/4/256
	movwf	T0CON, A	; = 62.5KHz clock rate, approx 1sec rollover
	bsf	TMR0IE		; Enable timer0 interrupt
	bsf	GIE		; Enable all interrupts
	;call Sine_tb_setup
	movff	offset_high, LATJ
	return
	
	
DAC_Int_Hi:		
	btfss	TMR0IF		; check that this is timer0 interrupt
	retfie	f
	call check_keyvalue
	nop
	bcf	TMR0IF		; clear interrupt flag
	retfie	f		; fast return from interrupt


check_keyvalue:
    ;movlw   0xff
    ;call    LCD_delay_ms
    movff keyvalue, 0x00, A
    bra key1
    key1:
	    movlw '1'		    ; Calls Sawtooth Wave Function
	    cpfseq keyvalue, A
	    bra key2
	    movwf prekey, A
	    call sawtooth
	    return
    key2:
	    movlw '2'
	    cpfseq keyvalue, A
	    bra key3
	    movwf prekey, A
	    call square		    ; Calls Square Wave Function
	    return
    key3:
	    movlw '3'
	    cpfseq keyvalue, A
	    bra keyF
	    movwf prekey, A
	    call check_sine		    ; Calls Sine Wave Function
	     ; Immanuel Changed this ('random'-Swapped with Sine)
	    return
    keyF:
	    movlw 'F'
	    cpfseq keyvalue, A
	    bra key4
	    movwf prekey, A
	    call random
	    return
    key4:
	    movlw '4'
	    cpfseq keyvalue, A
	    bra key5
	    movlw 10000000B
	    movwf T0CON, A		  ; Sets Interupt T0 timer to 10000000b
				      ; thus changing the Wave Freuency 
	    movff prekey, keyvalue, A
	    ;call check_keyvalue3
	    return
    key5:

	    movlw '5'
	    cpfseq keyvalue, A
	    bra key6
	    movlw 10000001B
	    movwf T0CON, A		  ; Sets Interupt T0 timer to 10000001b
				      ; thus changing the Wave Freuency
	    movff prekey, keyvalue, A
	    ;call check_keyvalue3
	    return
    key6:

	    movlw '6'
	    cpfseq keyvalue, A
	    bra keyE
	    movlw 10000010B		   
	    movwf T0CON, A		  ; Sets Interupt T0 timer to 10000010b
				      ; thus changing the Wave Freuency
	    movff prekey, keyvalue, A
	    ;call check_keyvalue3
	    return	
    keyE:

	    movlw 'E'	    ;unused key
	    cpfseq keyvalue, A
	    bra key7	  
;				    
	    movff prekey, keyvalue, A
	    ;call check_keyvalue3
	    return
	
    key7:

	    movlw '7'
	    cpfseq keyvalue, A
	    bra key8
	    movlw 10000011B		  ; Sets Interupt T0 timer to 10000011b
				      ; thus changing the Wave Freuency
	    movwf T0CON, A
	    movff prekey, keyvalue, A
	    ;call check_keyvalue3
	    return	

    key8:

	    movlw '8'
	    cpfseq keyvalue, A
	    bra key9
	    movlw 10000100B		  ; Sets Interupt T0 timer to 10000100b
				      ; thus changing the Wave Freuency
	    movwf T0CON, A
	    movff prekey, keyvalue, A
	    ;call check_keyvalue3
	    return	
    key9:

	    movlw '9'
	    cpfseq keyvalue, A
	    bra keyD
	    movlw 10000101B		  ; Sets Interupt T0 timer to 10000101b
				      ; thus changing the Wave Freuency
	    movwf T0CON, A
	    movff prekey, keyvalue, A
	    ;call check_keyvalue3
	    return
	    
    keyD:			;unused

	    movlw 'D'
	    cpfseq keyvalue, A
	    bra keyA
	    movff prekey, keyvalue, A
	    return
	    
    keyA:			;unused

	    movlw 'A'
	    cpfseq keyvalue, A
	    bra key0
	    movff prekey, keyvalue, A
	    ;call check_keyvalue3
	    return

    key0:

	    movlw '0'
	    cpfseq keyvalue, A
	    bra keyB
	    movlw 10000110B
	    movwf T0CON, A		  ; Sets Interupt T0 timer to 10000110b
				      ; thus changing the Wave Freuency
	    movff prekey, keyvalue, A		      
	    return	
	    
    keyB:			;unused

	    movlw 'B'
	    cpfseq keyvalue, A
	    bra keyC
	    movff prekey, keyvalue, A
	    ;call check_keyvalue3
	    return
    keyC:			;unused

	    movlw 'C'
	    cpfseq keyvalue, A
	    bra errork
	    movff prekey, keyvalue, A
	    ;call check_keyvalue3
	    return


    errork:
	    movf	keyvalue, W, A	
    return
    
   
;------------------------------------------------------------------------------;
;			      Sawtooth Wave				       ;
;------------------------------------------------------------------------------;
;--------------  Sawtooth Created by Looped Iterative Increments  -------------;
	     ;---------- in the output value of LATJ -----------;
	   ;---------- Loop caused by the finite number of Pins ---------;

sawtooth:

	movf	high_value, W, A
	addwf	offset_high, W, A
	movwf	0x02, A
	movf	LATJ, W, A
	cpfsgt	0x02, A
	call resetc
	incf	LATJ, F, A	; increment PORTJ
	return
resetc:
	movff offset_high, LATJ, A
	return

;------------------------------------------------------------------------------;
;			      Sawtooth wave discrete				       ;
;------------------------------------------------------------------------------;
;--------------  Alternative Sawtooth Created with similar method  -------------;
	     ;---------- but for 4 Amplitudes only -----------;
	   ;---------- Loop caused by the finite number of Pins ---------;	
	
sawtoothdis:
	call check_saw
	tstfsz sawcount, A
	bra incsawf
	bra ress

incsawf:
    
	movf	incsaw, W, A
	addwf	sawval, W, A
	movwf sawval, A
	movff sawval, LATJ, A
	decf sawcount, A
	return
	
ress:
	movff offset_high, sawval, A
	movff offset_high, LATJ, A
	movlw 0x3d
	movwf sawcount, A
	return
    
check_saw:
    movlw 0x40
    cpfsgt high_value, A	;picks sine of amplitude 0x05 if high_value less than this
    bra in1
    movlw 0x80
    cpfsgt high_value, A
    bra in2
    movlw 0xc0
    cpfsgt high_value, A
    bra in3
    bra in4
    
in1: movlw 0x01
    movwf incsaw, A
    return
    
in2: movlw 0x02
    movwf incsaw, A
    return
    
in3: movlw 0x03
    movwf incsaw, A
    return
    
in4: movlw 0x04
    movwf incsaw, A
    return	
	
	
;------------------------------------------------------------------------------;
;			      Square - Wave				       ;
;------------------------------------------------------------------------------;
 ;---------  Toggles Periodically between Peak & Trough of Square Wave --------;
	     ;---------- based on counter value -----------;
square:	
 tstfsz sqcon1, A  
 bra highs			;if not zero, high 
 tstfsz sqcon2, A
 bra zero
 bra sqreset
 
highs:
 movf high_value, W, A
 addwf offset_high, W, A
 movwf LATJ, A
 decf sqcon1, A
 return
zero:
 movff offset_high, LATJ, A
 decf sqcon2, A
 return
sqreset:
 movlw 0x1d
 movwf sqcon1, A
 movlw 0x1f
 movwf sqcon2, A
 return
;------------------------------------------------------------------------------;
;			 Sine - Function family				       ;
;------------------------------------------------------------------------------;
;---------------  Chooses 1 of 32 Predefined Sine Functions  -------------------;
	;---------- based on manually set Amplitude parameters -------;

check_sine:
    movlw 0x05
    cpfsgt high_value, A	;picks sine of amplitude 0x05 if high_value less than this
    bra	sinx05
    movlw 0x10
    cpfsgt high_value, A	;picks sine of amplitude 0x10 if high_value less than this
    bra	sinx10
    movlw 0x15			
    cpfsgt high_value, A	;picks sine of amplitude 0x15 if high_value less than this
    bra	sinx15		    
    movlw 0x20		    
    cpfsgt high_value, A	;picks sine of amplitude 0x20 if high_value less than this
    bra	sinx20
    movlw 0x25
    cpfsgt high_value, A	;picks sine of amplitude 0x25 if high_value less than this
    bra	sinx25
    movlw 0x30
    cpfsgt high_value, A	; and so on ...
    bra	sinx30
    movlw 0x35
    cpfsgt high_value, A
    bra	sinx35
    movlw 0x40
    cpfsgt high_value, A
    bra	sinx40
    movlw 0x45
    cpfsgt high_value, A
    bra	sinx45
    movlw 0x50
    cpfsgt high_value, A
    bra	sinx50
    movlw 0x55
    cpfsgt high_value, A
    bra	sinx55
    movlw 0x60
    cpfsgt high_value, A
    bra	sinx60
    movlw 0x65
    cpfsgt high_value, A
    bra	sinx65
    movlw 0x70
    cpfsgt high_value, A
    bra	sinx70
    movlw 0x75
    cpfsgt high_value, A
    bra	sinx75
    movlw 0x80
    cpfsgt high_value, A
    bra	sinx80
    movlw 0x85
    cpfsgt high_value, A
    bra	sinx85
    movlw 0x90
    cpfsgt high_value, A
    bra	sinx90
    movlw 0x95
    cpfsgt high_value, A
    bra	sinx95
    movlw 0xa0
    cpfsgt high_value, A
    bra	sinxa0
    movlw 0xa5
    cpfsgt high_value, A
    bra	sinxa5
    movlw 0xb0
    cpfsgt high_value, A
    bra	sinxb0
    movlw 0xb5
    cpfsgt high_value, A
    bra	sinxb5
    movlw 0xc0
    cpfsgt high_value, A
    bra	sinxc0
    movlw 0xc5
    cpfsgt high_value, A
    bra	sinxc5
    movlw 0xd0
    cpfsgt high_value, A
    bra	sinxd0
    movlw 0xd5
    cpfsgt high_value, A
    bra	sinxd5
    movlw 0xe0
    cpfsgt high_value, A
    bra	sinxe0
    movlw 0xe5
    cpfsgt high_value, A
    bra	sinxe5
    movlw 0xf0
    cpfsgt high_value, A
    bra	sinxf0
    movlw 0xf5
    cpfsgt high_value, A
    bra	sinxf5
    ;return
   
    
sinx05:
    movlw   0xfa		  ;moves value for maximum offset to WREG 
    lfsr    0,	low highword(Sinx08Table);Loads FSR0 with highword for selected sinetable
    lfsr    1,	high(Sinx08Table)	;Loads FSR1 with high for selected sinetable
    lfsr    2,  low(Sinx08Table)	;Loads FSR2 with low for selected sinetable
    bra	    sinx_wave_creator ;calls the wavecreator subroutine which uses the preloaded values
sinx10:
    movlw   0xfa		  ;moves value for maximum offset to WREG 
    lfsr    0,	low highword(Sinx10Table)   ;same procedure as for sinx05
    lfsr    1,	high(Sinx10Table)	   ;same procedure as for sinx05
    lfsr    2,  low(Sinx10Table)	   ;same procedure as for sinx05
    bra	    sinx_wave_creator		   ;same procedure as for sinx05
sinx15:
    movlw   0xea		  ;moves value for maximum offset to WREG 
    lfsr    0,	low highword(Sinx18Table)  ;and so on ...
    lfsr    1,	high(Sinx18Table)	   ;and so on ...
    lfsr    2,  low(Sinx18Table)           ;and so on ...
    bra	    sinx_wave_creator		   ;and so on ...
sinx20:
    movlw   0xdf		  ;moves value for maximum offset to WREG 
    lfsr    0,	low highword(Sinx20Table)
    lfsr    1,	high(Sinx20Table)
    lfsr    2,  low(Sinx20Table)
    bra	    sinx_wave_creator
 		
sinx25:				  ;moves value for maximum offset to WREG 
    movlw   0xda
    lfsr    0,	low highword(Sinx28Table)
    lfsr    1,	high(Sinx28Table)
    lfsr    2,  low(Sinx28Table)
    bra	    sinx_wave_creator   
sinx30:
    movlw   0xcf
    lfsr    0,	low highword(Sinx30Table)
    lfsr    1,	high(Sinx30Table)
    lfsr    2,  low(Sinx30Table)
    bra	    sinx_wave_creator 
sinx35:
    movlw   0xca
    lfsr    0,	low highword(Sinx38Table)
    lfsr    1,	high(Sinx38Table)
    lfsr    2,  low(Sinx38Table)
    bra	    sinx_wave_creator
sinx40:
    movlw   0xbf
    lfsr    0,	low highword(Sinx40Table)
    lfsr    1,	high(Sinx40Table)
    lfsr    2,  low(Sinx40Table)
    bra	    sinx_wave_creator
sinx45:
    movlw   0xba
    lfsr    0,	low highword(Sinx48Table)
    lfsr    1,	high(Sinx48Table)
    lfsr    2,  low(Sinx48Table)
    bra	    sinx_wave_creator 
sinx50:
    movlw   0xaf
    lfsr    0,	low highword(Sinx50Table)
    lfsr    1,	high(Sinx50Table)
    lfsr    2,  low(Sinx50Table)
    bra     sinx_wave_creator    
sinx55:
    movlw   0xaa
    lfsr    0,	low highword(Sinx58Table)
    lfsr    1,	high(Sinx58Table)
    lfsr    2,  low(Sinx58Table)
    bra	    sinx_wave_creator    
sinx60:
    movlw   0x9f
    lfsr    0,	low highword(Sinx60Table)
    lfsr    1,	high(Sinx60Table)
    lfsr    2,  low(Sinx60Table)
    bra	    sinx_wave_creator
sinx65:
    movlw   0x9a
    lfsr    0,	low highword(Sinx68Table)
    lfsr    1,	high(Sinx68Table)
    lfsr    2,  low(Sinx68Table)
    bra	    sinx_wave_creator   
sinx70:
    movlw   0x8f
    lfsr    0,	low highword(Sinx70Table)
    lfsr    1,	high(Sinx70Table)
    lfsr    2,  low(Sinx70Table)
    bra	    sinx_wave_creator    
sinx75:
    movlw   0x8a
    lfsr    0,	low highword(Sinx78Table)
    lfsr    1,	high(Sinx78Table)
    lfsr    2,  low(Sinx78Table)
    bra	    sinx_wave_creator    
sinx80:
    movlw   0x7f
    lfsr    0,	low highword(Sinx80Table)
    lfsr    1,	high(Sinx80Table)
    lfsr    2,  low(Sinx80Table)
    bra	    sinx_wave_creator
sinx85:
    movlw   0x7a
    lfsr    0,	low highword(Sinx88Table)
    lfsr    1,	high(Sinx88Table)
    lfsr    2,  low(Sinx88Table)
    bra	    sinx_wave_creator 
sinx90:
    movlw   0x6f
    lfsr    0,	low highword(Sinx90Table)
    lfsr    1,	high(Sinx90Table)
    lfsr    2,  low(Sinx90Table)
    bra	    sinx_wave_creator   
sinx95:
    movlw   0x6a
    lfsr    0,	low highword(Sinx98Table)
    lfsr    1,	high(Sinx98Table)
    lfsr    2,  low(Sinx98Table)
    bra	    sinx_wave_creator   
sinxa0:
    movlw   0x5f
    lfsr    0,	low highword(Sinxa0Table)
    lfsr    1,	high(Sinxa0Table)
    lfsr    2,  low(Sinxa0Table)
    bra	    sinx_wave_creator   
sinxa5:
    movlw   0x5a
    lfsr    0,	low highword (Sinxa8Table)
    lfsr    1,	high(Sinxa8Table)
    lfsr    2,  low(Sinxa8Table)
    bra	    sinx_wave_creator
sinxb0:
    movlw   0x4f
    lfsr    0,	low highword(Sinxb0Table)
    lfsr    1,	high(Sinxb0Table)
    lfsr    2,  low(Sinxb0Table)
    bra	    sinx_wave_creator
sinxb5:
    movlw   0x4a
    lfsr    0,	low highword(Sinxb8Table)
    lfsr    1,	high(Sinxb8Table)
    lfsr    2,  low(Sinxb8Table)
    bra	    sinx_wave_creator   
sinxc0:
    movlw   0x3f
    lfsr    0,	low highword(Sinxc0Table)
    lfsr    1,	high(Sinxc0Table)
    lfsr    2,  low(Sinxc0Table)
    bra	    sinx_wave_creator
sinxc5:
    movlw   0x3a
    lfsr    0,	low highword(Sinxc8Table)
    lfsr    1,	high(Sinxc8Table)
    lfsr    2,  low(Sinxc8Table)
    bra	    sinx_wave_creator   
sinxd0:
    movlw   0x2f
    lfsr    0,	low highword(Sinxd0Table)
    lfsr    1,	high(Sinxd0Table)
    lfsr    2,  low(Sinxd0Table)
    bra	    sinx_wave_creator    
sinxd5:
    movlw   0x2a
    lfsr    0,	low highword(Sinxd8Table)
    lfsr    1,	high(Sinxd8Table)
    lfsr    2,  low(Sinxd8Table)
    bra	    sinx_wave_creator
sinxe0:
    movlw   0x1f
    lfsr    0,	low highword(Sinxe0Table)
    lfsr    1,	high(Sinxe0Table)
    lfsr    2,  low(Sinxe0Table)
    bra	    sinx_wave_creator   
sinxe5:
    movlw   0x1a
    lfsr    0,	low highword(Sinxe8Table)
    lfsr    1,	high(Sinxe8Table)
    lfsr    2,  low(Sinxe8Table)
    bra     sinx_wave_creator   
sinxf0:
    movlw   0x04
    lfsr    0,	low highword(Sinxf0Table)
    lfsr    1,	high(Sinxf0Table)
    lfsr    2,  low(Sinxf0Table)
    bra     sinx_wave_creator
sinxf5:
    movlw   0x00
    lfsr    0,	low highword(Sinxf8Table)
    lfsr    1,	high(Sinxf8Table)
    lfsr    2,  low(Sinxf8Table)
    bra    sinx_wave_creator
    

sinx_wave_creator:
    cpfslt	offset_high, A	;compares offset_high with preloaded WREG value
			   ;skips if less than - keeping offset_high unaffected
			  ;if greater than, it is set to maximum preloaded value
    movwf	offset_high, A ;moves max preloaddd value from W to offset_high
    movlw	0x01	   ;checks if counter is less than 0x01,
    cpfsgt	counter, A  ;skips if greater
    call	Sinx_tb_setup ;if not, calls the sine setup subroutine to reload 
			;the tablat with sine_table values
    tblrd*+	; one byte from PM to TABLAT, increment TBLPRT
    movf offset_high, W, A
    addwf TABLAT, W, A
    movwf LATJ, A; move data from TABLAT to LATJ for measurements - ;(FSR0), inc FSR0	
    decf	counter, A
    return	
	    Sinx_tb_setup:
		movff	FSR0, TBLPTRU, A		; load upper bits to TBLPTRU
		movff	FSR1, TBLPTRH, A		; load high byte to TBLPTR
		movff	FSR2, TBLPTRL, A
		movlw	table_length	; bytes to read
		movwf 	counter, A			
		return

	
random:
	
	movff high_value, LATJ, A
	
	return


	end
   
   
